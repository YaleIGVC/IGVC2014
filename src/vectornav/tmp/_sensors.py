"""autogenerated by genpy from vectornav/sensors.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class sensors(genpy.Message):
  _md5sum = "c5215e6ec84aeaa8f38adc4380e155e4"
  _type = "vectornav/sensors"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """std_msgs/Header       header
geometry_msgs/Vector3 Mag 
geometry_msgs/Vector3 Accel
geometry_msgs/Vector3 Gyro
float32               Temp
float32               Pressure



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 

float64 x
float64 y
float64 z
"""
  __slots__ = ['header','Mag','Accel','Gyro','Temp','Pressure']
  _slot_types = ['std_msgs/Header','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,Mag,Accel,Gyro,Temp,Pressure

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sensors, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Mag is None:
        self.Mag = geometry_msgs.msg.Vector3()
      if self.Accel is None:
        self.Accel = geometry_msgs.msg.Vector3()
      if self.Gyro is None:
        self.Gyro = geometry_msgs.msg.Vector3()
      if self.Temp is None:
        self.Temp = 0.
      if self.Pressure is None:
        self.Pressure = 0.
    else:
      self.header = std_msgs.msg.Header()
      self.Mag = geometry_msgs.msg.Vector3()
      self.Accel = geometry_msgs.msg.Vector3()
      self.Gyro = geometry_msgs.msg.Vector3()
      self.Temp = 0.
      self.Pressure = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d2f.pack(_x.Mag.x, _x.Mag.y, _x.Mag.z, _x.Accel.x, _x.Accel.y, _x.Accel.z, _x.Gyro.x, _x.Gyro.y, _x.Gyro.z, _x.Temp, _x.Pressure))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Mag is None:
        self.Mag = geometry_msgs.msg.Vector3()
      if self.Accel is None:
        self.Accel = geometry_msgs.msg.Vector3()
      if self.Gyro is None:
        self.Gyro = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.Mag.x, _x.Mag.y, _x.Mag.z, _x.Accel.x, _x.Accel.y, _x.Accel.z, _x.Gyro.x, _x.Gyro.y, _x.Gyro.z, _x.Temp, _x.Pressure,) = _struct_9d2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_9d2f.pack(_x.Mag.x, _x.Mag.y, _x.Mag.z, _x.Accel.x, _x.Accel.y, _x.Accel.z, _x.Gyro.x, _x.Gyro.y, _x.Gyro.z, _x.Temp, _x.Pressure))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.Mag is None:
        self.Mag = geometry_msgs.msg.Vector3()
      if self.Accel is None:
        self.Accel = geometry_msgs.msg.Vector3()
      if self.Gyro is None:
        self.Gyro = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 80
      (_x.Mag.x, _x.Mag.y, _x.Mag.z, _x.Accel.x, _x.Accel.y, _x.Accel.z, _x.Gyro.x, _x.Gyro.y, _x.Gyro.z, _x.Temp, _x.Pressure,) = _struct_9d2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_9d2f = struct.Struct("<9d2f")
